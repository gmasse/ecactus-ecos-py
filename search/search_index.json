{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eCactus ECOS Python Client","text":"<p>This Python client provides both synchronous and asynchronous interfaces to interact with the eCactus ECOS platform from WEIHENG Group for energy management. However, this project is in its early stages, is not fully tested, and is not safe for production use. Use it at your own risk.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Synchronous Access: Use the <code>Ecos</code> class for straightforward, blocking operations.</li> <li>Asynchronous Access: Use the <code>AsyncEcos</code> class for non-blocking, concurrent operations.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\npip install ecactus-ecos-py\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#synchronous-client","title":"Synchronous Client","text":"<pre><code>from ecactus import Ecos\n\n# Initialize the client\nsession = Ecos(datacenter='EU')\nsession.login('email@domain.com', 'mypassword')\n\n# Fetch user details\nuser = session.get_user()\nprint(user)\n\n# Retrieve all the devices\ndevices = session.get_all_devices()\nprint(devices)\n</code></pre>"},{"location":"#asynchronous-client","title":"Asynchronous Client","text":"<pre><code>import asyncio\nfrom ecactus import AsyncEcos\n\nasync def main():\n    # Initialize the client\n    session = AsyncEcos(datacenter='EU')\n    await session.login('email@domain.com', 'mypassword')\n\n    # Fetch user details\n    user = await session.get_user()\n    print(user)\n\n    # Retrieve all the devices\n    devices = await session.get_all_devices()\n    print(devices)\n\nasyncio.run(main())\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>A set of ready-to-use scripts is available in the <code>examples/</code> directory.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The API references for both <code>Ecos</code> and <code>AsyncEcos</code> clients, is available at: eCactus ECOS API Client Documentation</p>"},{"location":"api/","title":"Reference","text":"<p>Top-level module for importing the Ecos class.</p>"},{"location":"api/#ecactus.AsyncEcos","title":"<code>AsyncEcos(email=None, password=None, country=None, datacenter=None, url=None, access_token=None, refresh_token=None)</code>","text":"<p>Asynchronous ECOS API client class.</p> <p>This class provides methods for interacting with the ECOS API, including authentication, retrieving user information, and managing homes. It uses the <code>aiohttp</code> library to make asynchronous HTTP requests to the API.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str | None</code> <p>The user's email to use for authentication.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>The user's password to use for authentication.</p> <code>None</code> <code>country</code> <code>str | None</code> <p>Reserved for future.</p> <code>None</code> <code>datacenter</code> <code>str | None</code> <p>The location of the ECOS API datacenter. Can be one of <code>CN</code>, <code>EU</code>, or <code>AU</code>.</p> <code>None</code> <code>url</code> <code>str | None</code> <p>The URL of the ECOS API. If specified, <code>datacenter</code> is ignored.</p> <code>None</code> <code>access_token</code> <code>str | None</code> <p>The access token for authentication with the ECOS API.</p> <code>None</code> <code>refresh_token</code> <code>str | None</code> <p>The refresh token for authentication with the ECOS API.</p> <code>None</code> <p>Raises:</p> Type Description <code>InitializationError</code> <p>If <code>datacenter</code> is not one of <code>CN</code>, <code>EU</code>, or <code>AU</code> and <code>url</code> is not provided.</p> Source code in <code>src/ecactus/base.py</code> <pre><code>def __init__(\n    self,\n    email: str | None = None,\n    password: str | None = None,\n    country: str | None = None,\n    datacenter: str | None = None,\n    url: str | None = None,\n    access_token: str | None = None,\n    refresh_token: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize a session with ECOS API.\n\n    Args:\n        email: The user's email to use for authentication.\n        password: The user's password to use for authentication.\n        country: _Reserved for future_.\n        datacenter: The location of the ECOS API datacenter.\n            Can be one of `CN`, `EU`, or `AU`.\n        url: The URL of the ECOS API. If specified, `datacenter` is ignored.\n        access_token: The access token for authentication with the ECOS API.\n        refresh_token: The refresh token for authentication with the ECOS API.\n\n    Raises:\n        InitializationError: If `datacenter` is not one of `CN`, `EU`, or `AU` and `url` is not provided.\n\n    \"\"\"\n    logger.info(\"Initializing session\")\n    self.email = email\n    self.password = password\n    self.country = country\n    self.access_token = access_token\n    self.refresh_token = refresh_token\n    # TODO: get datacenters from https://dcdn-config.weiheng-tech.com/prod/config.json\n    datacenters = {\n        \"CN\": \"https://api-ecos-hu.weiheng-tech.com\",\n        \"EU\": \"https://api-ecos-eu.weiheng-tech.com\",\n        \"AU\": \"https://api-ecos-au.weiheng-tech.com\",\n    }\n    if url is None:\n        if datacenter is None:\n            raise InitializationError(\"url or datacenter not specified\")\n        if datacenter not in datacenters:\n            raise InitializationError(\n                \"datacenter must be one of {}\".format(\", \".join(datacenters.keys()))\n            )\n        self.url = datacenters[datacenter]\n    else:  # url specified, ignore datacenter\n        self.url = url.rstrip(\"/\")  # remove trailing / from url\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.login","title":"<code>login(email=None, password=None)</code>  <code>async</code>","text":"<p>Authenticate with the ECOS API using a provided email and password.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str | None</code> <p>The user's email to use for authentication.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>The user's password to use for authentication.</p> <code>None</code> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def login(\n    self, email: str | None = None, password: str | None = None\n) -&gt; None:\n    \"\"\"Authenticate with the ECOS API using a provided email and password.\n\n    Args:\n        email: The user's email to use for authentication.\n        password: The user's password to use for authentication.\n\n    Raises:\n        AuthenticationError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Login\")\n    if email is not None:\n        self.email = email\n    if password is not None:\n        self.password = password\n    payload = {\n        \"_t\": int(time.time()),\n        \"clientType\": \"BROWSER\",\n        \"clientVersion\": \"1.0\",\n        \"email\": self.email,\n        \"password\": self.password,\n    }\n    try:\n        data = await self._async_post(\"/api/client/guide/login\", payload=payload)\n    except ApiResponseError as err:\n        if err.code == 20414:\n            raise AuthenticationError from err\n        if err.code == 20000:\n            raise AuthenticationError(\"Missing Account or Password\") from err\n        raise\n    self.access_token = data[\"accessToken\"]\n    self.refresh_token = data[\"refreshToken\"]\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_user","title":"<code>get_user()</code>  <code>async</code>","text":"<p>Get user details.</p> <p>Returns:</p> Type Description <code>User</code> <p>A User object.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_user(self) -&gt; User:\n    \"\"\"Get user details.\n\n    Returns:\n        A User object.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get user\")\n    await self._ensure_login()\n    return User(**await self._async_get(\"/api/client/settings/user/info\"))\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_homes","title":"<code>get_homes()</code>  <code>async</code>","text":"<p>Get a list of homes.</p> <p>Returns:</p> Type Description <code>list[Home]</code> <p>A list of Home objects.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_homes(self) -&gt; list[Home]:\n    \"\"\"Get a list of homes.\n\n    Returns:\n        A list of Home objects.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get home list\")\n    await self._ensure_login()\n    return [\n        Home(**home_data)\n        for home_data in await self._async_get(\"/api/client/v2/home/family/query\")\n    ]\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_devices","title":"<code>get_devices(home_id)</code>  <code>async</code>","text":"<p>Get a list of devices for a home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>str</code> <p>The home ID to get devices for.</p> required <p>Returns:</p> Type Description <code>list[Device]</code> <p>A list of Device objects.</p> <p>Raises:</p> Type Description <code>HomeDoesNotExistError</code> <p>If the home id is not correct.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_devices(self, home_id: str) -&gt; list[Device]:\n    \"\"\"Get a list of devices for a home.\n\n    Args:\n        home_id: The home ID to get devices for.\n\n    Returns:\n        A list of Device objects.\n\n    Raises:\n        HomeDoesNotExistError: If the home id is not correct.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get devices for home %s\", home_id)\n    await self._ensure_login()\n    try:\n        return [\n            Device(**device_data)\n            for device_data in await self._async_get(\n                \"/api/client/v2/home/device/query\", payload={\"homeId\": home_id}\n            )\n        ]\n    except ApiResponseError as err:\n        if err.code == 20450:\n            raise HomeDoesNotExistError(home_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_all_devices","title":"<code>get_all_devices()</code>  <code>async</code>","text":"<p>Get a list of all the devices.</p> <p>Returns:</p> Type Description <code>list[Device]</code> <p>A list of Device objects.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_all_devices(self) -&gt; list[Device]:\n    \"\"\"Get a list of all the devices.\n\n    Returns:\n        A list of Device objects.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get devices for every homes\")\n    await self._ensure_login()\n    return [\n        Device(**device_data)\n        for device_data in await self._async_get(\"/api/client/home/device/list\")\n    ]\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_today_device_data","title":"<code>get_today_device_data(device_id)</code>  <code>async</code>","text":"<p>Get power metrics of the current day until now.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get power metrics for.</p> required <p>Returns:</p> Type Description <code>PowerTimeSeries</code> <p>Metrics of the current day until now.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_today_device_data(self, device_id: str) -&gt; PowerTimeSeries:\n    \"\"\"Get power metrics of the current day until now.\n\n    Args:\n        device_id: The device ID to get power metrics for.\n\n    Returns:\n        Metrics of the current day until now.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get current day data for device %s\", device_id)\n    await self._ensure_login()\n    try:\n        return PowerTimeSeries(**await self._async_post(\n            \"/api/client/home/now/device/realtime\", payload={\"deviceId\": device_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_realtime_home_data","title":"<code>get_realtime_home_data(home_id)</code>  <code>async</code>","text":"<p>Get current power for the home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>str</code> <p>The home ID to get current power for.</p> required <p>Returns:</p> Type Description <code>PowerMetrics</code> <p>Current metrics for the home.</p> <p>Raises:</p> Type Description <code>HomeDoesNotExistError</code> <p>If the home id is not correct.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_realtime_home_data(self, home_id: str) -&gt; PowerMetrics:\n    \"\"\"Get current power for the home.\n\n    Args:\n        home_id: The home ID to get current power for.\n\n    Returns:\n        Current metrics for the home.\n\n    Raises:\n        HomeDoesNotExistError: If the home id is not correct.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get realtime data for home %s\", home_id)\n    try:\n        return PowerMetrics(**await self._async_get(\n            \"/api/client/v2/home/device/runData\", payload={\"homeId\": home_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20450:\n            raise HomeDoesNotExistError(home_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_realtime_device_data","title":"<code>get_realtime_device_data(device_id)</code>  <code>async</code>","text":"<p>Get current power for a device.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get current power for.</p> required <p>Returns:</p> Type Description <code>PowerMetrics</code> <p>Current metrics for the device.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_realtime_device_data(self, device_id: str) -&gt; PowerMetrics:\n    \"\"\"Get current power for a device.\n\n    Args:\n        device_id: The device ID to get current power for.\n\n    Returns:\n        Current metrics for the device.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get realtime data for device %s\", device_id)\n    try:\n        return PowerMetrics(**await self._async_post(\n            \"/api/client/home/now/device/runData\", payload={\"deviceId\": device_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_history","title":"<code>get_history(device_id, period_type, start_date=None)</code>  <code>async</code>","text":"<p>Get aggregated energy for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get history for.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: daily values of the calendar month corresponding to <code>start_date</code></li> <li><code>1</code>: today daily values (<code>start_date</code> is ignored) (?)</li> <li><code>2</code>: daily values of the current month (<code>start_date</code> is ignored)</li> <li><code>3</code>: same than 2 ?</li> <li><code>4</code>: total for the current month (<code>start_date</code> is ignored)</li> </ul> required <code>start_date</code> <code>datetime | None</code> <p>The start date.</p> <code>None</code> <p>Returns:</p> Type Description <code>EnergyHistory</code> <p>Data and metrics corresponding to the defined period.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>ParameterVerificationFailedError</code> <p>If a parameter is not valid (<code>period_type</code> number for example)</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_history(\n    self, device_id: str, period_type: int, start_date: datetime | None = None\n) -&gt; EnergyHistory:\n    \"\"\"Get aggregated energy for a period.\n\n    Args:\n        device_id: The device ID to get history for.\n        period_type: Possible value:\n\n            - `0`: daily values of the calendar month corresponding to `start_date`\n            - `1`: today daily values (`start_date` is ignored) (?)\n            - `2`: daily values of the current month (`start_date` is ignored)\n            - `3`: same than 2 ?\n            - `4`: total for the current month (`start_date` is ignored)\n        start_date: The start date.\n\n    Returns:\n        Data and metrics corresponding to the defined period.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        ParameterVerificationFailedError: If a parameter is not valid (`period_type` number for example)\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get history for device %s\", device_id)\n    if start_date is None:\n        if period_type in (1, 2, 4):\n            start_ts = 0\n        else:\n            raise ParameterVerificationFailedError(f\"start_date is required for period_type {period_type}\")\n    else:\n        start_ts = int(start_date.timestamp()) if start_date is not None else 0\n    try:\n        return EnergyHistory(**await self._async_post(\n            \"/api/client/home/history/home\",\n            payload={\n                \"deviceId\": device_id,\n                \"timestamp\": start_ts,\n                \"periodType\": period_type,\n            },\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        if err.code == 20404:\n            raise ParameterVerificationFailedError from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.AsyncEcos.get_insight","title":"<code>get_insight(device_id, period_type, start_date=None)</code>  <code>async</code>","text":"<p>Get energy metrics and statistics of a device for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get data for.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: 5-minute power measurement for the calendar day corresponding to <code>start_date</code> (<code>insightConsumptionDataDto</code> is <code>None</code>)</li> <li><code>1</code>: (not implemented)</li> <li><code>2</code>: daily energy for the calendar month corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>3</code>: (not implemented)</li> <li><code>4</code>: monthly energy for the calendar year corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>5</code>: yearly energy, <code>start_date</code> is ignored (?) (<code>deviceRealtimeDto</code> is <code>None</code>)</li> </ul> required <code>start_date</code> <code>datetime | None</code> <p>The start date.</p> <code>None</code> <p>Returns:</p> Type Description <code>DeviceInsight</code> <p>Statistics and metrics corresponding to the defined period.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>ParameterVerificationFailedError</code> <p>If a parameter is not valid (<code>period_type</code> number for example)</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/async_client.py</code> <pre><code>async def get_insight(\n    self, device_id: str, period_type: int, start_date: datetime | None = None\n) -&gt; DeviceInsight:\n    \"\"\"Get energy metrics and statistics of a device for a period.\n\n    Args:\n        device_id: The device ID to get data for.\n        period_type: Possible value:\n\n            - `0`: 5-minute power measurement for the calendar day corresponding to `start_date` (`insightConsumptionDataDto` is `None`)\n            - `1`: (not implemented)\n            - `2`: daily energy for the calendar month corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `3`: (not implemented)\n            - `4`: monthly energy for the calendar year corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `5`: yearly energy, `start_date` is ignored (?) (`deviceRealtimeDto` is `None`)\n        start_date: The start date.\n\n    Returns:\n        Statistics and metrics corresponding to the defined period.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        ParameterVerificationFailedError: If a parameter is not valid (`period_type` number for example)\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get insight for device %s\", device_id)\n    if start_date is None:\n        if period_type == 5:\n            start_ts = 0\n        else:\n            raise ParameterVerificationFailedError(f\"start_date is required for period_type {period_type}\")\n    else:\n        start_ts = int(start_date.timestamp() * 1000)  # timestamp in milliseconds\n    try:\n        return DeviceInsight(**await self._async_post(\n            \"/api/client/v2/device/three/device/insight\",\n            payload={\n                \"deviceId\": device_id,\n                \"timestamp\": start_ts,\n                \"periodType\": period_type,\n            },\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        if err.code == 20404:\n            raise ParameterVerificationFailedError from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos","title":"<code>Ecos(email=None, password=None, country=None, datacenter=None, url=None, access_token=None, refresh_token=None)</code>","text":"<p>Synchronous ECOS API client class.</p> <p>This class provides methods for interacting with the ECOS API, including authentication, retrieving user information, and managing homes. It uses the <code>requests</code> library to make HTTP requests to the API.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str | None</code> <p>The user's email to use for authentication.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>The user's password to use for authentication.</p> <code>None</code> <code>country</code> <code>str | None</code> <p>Reserved for future.</p> <code>None</code> <code>datacenter</code> <code>str | None</code> <p>The location of the ECOS API datacenter. Can be one of <code>CN</code>, <code>EU</code>, or <code>AU</code>.</p> <code>None</code> <code>url</code> <code>str | None</code> <p>The URL of the ECOS API. If specified, <code>datacenter</code> is ignored.</p> <code>None</code> <code>access_token</code> <code>str | None</code> <p>The access token for authentication with the ECOS API.</p> <code>None</code> <code>refresh_token</code> <code>str | None</code> <p>The refresh token for authentication with the ECOS API.</p> <code>None</code> <p>Raises:</p> Type Description <code>InitializationError</code> <p>If <code>datacenter</code> is not one of <code>CN</code>, <code>EU</code>, or <code>AU</code> and <code>url</code> is not provided.</p> Source code in <code>src/ecactus/base.py</code> <pre><code>def __init__(\n    self,\n    email: str | None = None,\n    password: str | None = None,\n    country: str | None = None,\n    datacenter: str | None = None,\n    url: str | None = None,\n    access_token: str | None = None,\n    refresh_token: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize a session with ECOS API.\n\n    Args:\n        email: The user's email to use for authentication.\n        password: The user's password to use for authentication.\n        country: _Reserved for future_.\n        datacenter: The location of the ECOS API datacenter.\n            Can be one of `CN`, `EU`, or `AU`.\n        url: The URL of the ECOS API. If specified, `datacenter` is ignored.\n        access_token: The access token for authentication with the ECOS API.\n        refresh_token: The refresh token for authentication with the ECOS API.\n\n    Raises:\n        InitializationError: If `datacenter` is not one of `CN`, `EU`, or `AU` and `url` is not provided.\n\n    \"\"\"\n    logger.info(\"Initializing session\")\n    self.email = email\n    self.password = password\n    self.country = country\n    self.access_token = access_token\n    self.refresh_token = refresh_token\n    # TODO: get datacenters from https://dcdn-config.weiheng-tech.com/prod/config.json\n    datacenters = {\n        \"CN\": \"https://api-ecos-hu.weiheng-tech.com\",\n        \"EU\": \"https://api-ecos-eu.weiheng-tech.com\",\n        \"AU\": \"https://api-ecos-au.weiheng-tech.com\",\n    }\n    if url is None:\n        if datacenter is None:\n            raise InitializationError(\"url or datacenter not specified\")\n        if datacenter not in datacenters:\n            raise InitializationError(\n                \"datacenter must be one of {}\".format(\", \".join(datacenters.keys()))\n            )\n        self.url = datacenters[datacenter]\n    else:  # url specified, ignore datacenter\n        self.url = url.rstrip(\"/\")  # remove trailing / from url\n</code></pre>"},{"location":"api/#ecactus.Ecos.login","title":"<code>login(email=None, password=None)</code>","text":"<p>Authenticate with the ECOS API using a provided email and password.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str | None</code> <p>The user's email to use for authentication.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>The user's password to use for authentication.</p> <code>None</code> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def login(\n    self, email: str | None = None, password: str | None = None\n) -&gt; None:\n    \"\"\"Authenticate with the ECOS API using a provided email and password.\n\n    Args:\n        email: The user's email to use for authentication.\n        password: The user's password to use for authentication.\n\n    Raises:\n        AuthenticationError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Login\")\n    if email is not None:\n        self.email = email\n    if password is not None:\n        self.password = password\n    payload = {\n        \"_t\": int(time.time()),\n        \"clientType\": \"BROWSER\",\n        \"clientVersion\": \"1.0\",\n        \"email\": self.email,\n        \"password\": self.password,\n    }\n    try:\n        data = self._post(\"/api/client/guide/login\", payload=payload)\n    except ApiResponseError as err:\n        if err.code == 20414:\n            raise AuthenticationError from err\n        if err.code == 20000:\n            raise AuthenticationError(\"Missing Account or Password\") from err\n        raise\n    self.access_token = data[\"accessToken\"]\n    self.refresh_token = data[\"refreshToken\"]\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_user","title":"<code>get_user()</code>","text":"<p>Get user details.</p> <p>Returns:</p> Type Description <code>User</code> <p>A User object.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_user(self) -&gt; User:\n    \"\"\"Get user details.\n\n    Returns:\n        A User object.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get user\")\n    self._ensure_login()\n    return User(**self._get(\"/api/client/settings/user/info\"))\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_homes","title":"<code>get_homes()</code>","text":"<p>Get a list of homes.</p> <p>Returns:</p> Type Description <code>list[Home]</code> <p>A list of Home objects.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_homes(self) -&gt; list[Home]:\n    \"\"\"Get a list of homes.\n\n    Returns:\n        A list of Home objects.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get home list\")\n    self._ensure_login()\n    return [\n        Home(**home_data)\n        for home_data in self._get(\"/api/client/v2/home/family/query\")\n    ]\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_devices","title":"<code>get_devices(home_id)</code>","text":"<p>Get a list of devices for a home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>str</code> <p>The home ID to get devices for.</p> required <p>Returns:</p> Type Description <code>list[Device]</code> <p>A list of Device objects.</p> <p>Raises:</p> Type Description <code>HomeDoesNotExistError</code> <p>If the home id is not correct.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_devices(self, home_id: str) -&gt; list[Device]:\n    \"\"\"Get a list of devices for a home.\n\n    Args:\n        home_id: The home ID to get devices for.\n\n    Returns:\n        A list of Device objects.\n\n    Raises:\n        HomeDoesNotExistError: If the home id is not correct.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get devices for home %s\", home_id)\n    self._ensure_login()\n    try:\n        return [\n            Device(**device_data)\n            for device_data in self._get(\n                \"/api/client/v2/home/device/query\", payload={\"homeId\": home_id}\n            )\n        ]\n    except ApiResponseError as err:\n        if err.code == 20450:\n            raise HomeDoesNotExistError(home_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_all_devices","title":"<code>get_all_devices()</code>","text":"<p>Get a list of all the devices.</p> <p>Returns:</p> Type Description <code>list[Device]</code> <p>A list of Device objects.</p> <p>Raises:</p> Type Description <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_all_devices(self) -&gt; list[Device]:\n    \"\"\"Get a list of all the devices.\n\n    Returns:\n        A list of Device objects.\n\n    Raises:\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get devices for every homes\")\n    self._ensure_login()\n    return [\n        Device(**device_data)\n        for device_data in self._get(\"/api/client/home/device/list\")\n    ]\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_today_device_data","title":"<code>get_today_device_data(device_id)</code>","text":"<p>Get power metrics of the current day until now.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get power metrics for.</p> required <p>Returns:</p> Type Description <code>PowerTimeSeries</code> <p>Metrics of the current day until now.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_today_device_data(self, device_id: str) -&gt; PowerTimeSeries:\n    \"\"\"Get power metrics of the current day until now.\n\n    Args:\n        device_id: The device ID to get power metrics for.\n\n    Returns:\n        Metrics of the current day until now.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get current day data for device %s\", device_id)\n    self._ensure_login()\n    try:\n        return PowerTimeSeries(**self._post(\n            \"/api/client/home/now/device/realtime\", payload={\"deviceId\": device_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_realtime_home_data","title":"<code>get_realtime_home_data(home_id)</code>","text":"<p>Get current power for the home.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>str</code> <p>The home ID to get current power for.</p> required <p>Returns:</p> Type Description <code>PowerMetrics</code> <p>Current metrics for the home.</p> <p>Raises:</p> Type Description <code>HomeDoesNotExistError</code> <p>If the home id is not correct.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_realtime_home_data(self, home_id: str) -&gt; PowerMetrics:\n    \"\"\"Get current power for the home.\n\n    Args:\n        home_id: The home ID to get current power for.\n\n    Returns:\n        Current metrics for the home.\n\n    Raises:\n        HomeDoesNotExistError: If the home id is not correct.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get realtime data for home %s\", home_id)\n    try:\n        return PowerMetrics(**self._get(\n            \"/api/client/v2/home/device/runData\", payload={\"homeId\": home_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20450:\n            raise HomeDoesNotExistError(home_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_realtime_device_data","title":"<code>get_realtime_device_data(device_id)</code>","text":"<p>Get current power for a device.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get current power for.</p> required <p>Returns:</p> Type Description <code>PowerMetrics</code> <p>Current metrics for the device.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_realtime_device_data(self, device_id: str) -&gt; PowerMetrics:\n    \"\"\"Get current power for a device.\n\n    Args:\n        device_id: The device ID to get current power for.\n\n    Returns:\n        Current metrics for the device.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get realtime data for device %s\", device_id)\n    try:\n        return PowerMetrics(**self._post(\n            \"/api/client/home/now/device/runData\", payload={\"deviceId\": device_id}\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_history","title":"<code>get_history(device_id, period_type, start_date=None)</code>","text":"<p>Get aggregated energy for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get history for.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: daily values of the calendar month corresponding to <code>start_date</code></li> <li><code>1</code>: today daily values (<code>start_date</code> is ignored) (?)</li> <li><code>2</code>: daily values of the current month (<code>start_date</code> is ignored)</li> <li><code>3</code>: same than 2 ?</li> <li><code>4</code>: total for the current month (<code>start_date</code> is ignored)</li> </ul> required <code>start_date</code> <code>datetime | None</code> <p>The start date.</p> <code>None</code> <p>Returns:</p> Type Description <code>EnergyHistory</code> <p>Data and metrics corresponding to the defined period.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>ParameterVerificationFailedError</code> <p>If a parameter is not valid (<code>period_type</code> number for example)</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_history(\n    self, device_id: str, period_type: int, start_date: datetime | None = None\n) -&gt; EnergyHistory:\n    \"\"\"Get aggregated energy for a period.\n\n    Args:\n        device_id: The device ID to get history for.\n        period_type: Possible value:\n\n            - `0`: daily values of the calendar month corresponding to `start_date`\n            - `1`: today daily values (`start_date` is ignored) (?)\n            - `2`: daily values of the current month (`start_date` is ignored)\n            - `3`: same than 2 ?\n            - `4`: total for the current month (`start_date` is ignored)\n        start_date: The start date.\n\n    Returns:\n        Data and metrics corresponding to the defined period.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        ParameterVerificationFailedError: If a parameter is not valid (`period_type` number for example)\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get history for device %s\", device_id)\n    if start_date is None:\n        if period_type in (1, 2, 4):\n            start_ts = 0\n        else:\n            raise ParameterVerificationFailedError(f\"start_date is required for period_type {period_type}\")\n    else:\n        start_ts = int(start_date.timestamp()) if start_date is not None else 0\n    try:\n        return EnergyHistory(**self._post(\n            \"/api/client/home/history/home\",\n            payload={\n                \"deviceId\": device_id,\n                \"timestamp\": start_ts,\n                \"periodType\": period_type,\n            },\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        if err.code == 20404:\n            raise ParameterVerificationFailedError from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.Ecos.get_insight","title":"<code>get_insight(device_id, period_type, start_date=None)</code>","text":"<p>Get energy metrics and statistics of a device for a period.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str</code> <p>The device ID to get data for.</p> required <code>period_type</code> <code>int</code> <p>Possible value:</p> <ul> <li><code>0</code>: 5-minute power measurement for the calendar day corresponding to <code>start_date</code> (<code>insightConsumptionDataDto</code> is <code>None</code>)</li> <li><code>1</code>: (not implemented)</li> <li><code>2</code>: daily energy for the calendar month corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>3</code>: (not implemented)</li> <li><code>4</code>: monthly energy for the calendar year corresponding to <code>start_date</code> (<code>deviceRealtimeDto</code> is <code>None</code>)</li> <li><code>5</code>: yearly energy, <code>start_date</code> is ignored (?) (<code>deviceRealtimeDto</code> is <code>None</code>)</li> </ul> required <code>start_date</code> <code>datetime | None</code> <p>The start date.</p> <code>None</code> <p>Returns:</p> Type Description <code>DeviceInsight</code> <p>Statistics and metrics corresponding to the defined period.</p> <p>Raises:</p> Type Description <code>UnauthorizedDeviceError</code> <p>If the device is not authorized or unknown.</p> <code>ParameterVerificationFailedError</code> <p>If a parameter is not valid (<code>period_type</code> number for example)</p> <code>UnauthorizedError</code> <p>If the Authorization token is not valid.</p> <code>ApiResponseError</code> <p>If the API returns a non-successful response.</p> Source code in <code>src/ecactus/client.py</code> <pre><code>def get_insight(\n    self, device_id: str, period_type: int, start_date: datetime | None = None\n) -&gt; DeviceInsight:\n    \"\"\"Get energy metrics and statistics of a device for a period.\n\n    Args:\n        device_id: The device ID to get data for.\n        period_type: Possible value:\n\n            - `0`: 5-minute power measurement for the calendar day corresponding to `start_date` (`insightConsumptionDataDto` is `None`)\n            - `1`: (not implemented)\n            - `2`: daily energy for the calendar month corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `3`: (not implemented)\n            - `4`: monthly energy for the calendar year corresponding to `start_date` (`deviceRealtimeDto` is `None`)\n            - `5`: yearly energy, `start_date` is ignored (?) (`deviceRealtimeDto` is `None`)\n        start_date: The start date.\n\n    Returns:\n        Statistics and metrics corresponding to the defined period.\n\n    Raises:\n        UnauthorizedDeviceError: If the device is not authorized or unknown.\n        ParameterVerificationFailedError: If a parameter is not valid (`period_type` number for example)\n        UnauthorizedError: If the Authorization token is not valid.\n        ApiResponseError: If the API returns a non-successful response.\n\n    \"\"\"\n    logger.info(\"Get insight for device %s\", device_id)\n    if start_date is None:\n        if period_type == 5:\n            start_ts = 0\n        else:\n            raise ParameterVerificationFailedError(f\"start_date is required for period_type {period_type}\")\n    else:\n        start_ts = int(start_date.timestamp() * 1000)  # timestamp in milliseconds\n    try:\n        return DeviceInsight(**self._post(\n            \"/api/client/v2/device/three/device/insight\",\n            payload={\n                \"deviceId\": device_id,\n                \"timestamp\": start_ts,\n                \"periodType\": period_type,\n            },\n        ))\n    except ApiResponseError as err:\n        if err.code == 20424:\n            raise UnauthorizedDeviceError(device_id) from err\n        if err.code == 20404:\n            raise ParameterVerificationFailedError from err\n        raise\n</code></pre>"},{"location":"api/#ecactus.model","title":"<code>ecactus.model</code>","text":"<p>Data model for ECOS API.</p>"},{"location":"api/#ecactus.model.User","title":"<code>User</code>","text":"<p>Represents a user.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>The user's username.</p> <code>nickname</code> <code>str</code> <p>The user's nickname.</p> <code>email</code> <code>str</code> <p>The user's email address.</p> <code>phone</code> <code>str</code> <p>The user's phone number.</p> <code>timezone_id</code> <code>str</code> <p>The user's time zone ID.</p> <code>timezone</code> <code>str</code> <p>The user's time zone offset (e.g., GMT-05:00).</p> <code>timezone_name</code> <code>str</code> <p>The user's time zone name (e.g., America/Toronto).</p> <code>datacenter_phonecode</code> <code>int</code> <p>The user's datacenter phone code.</p> <code>datacenter</code> <code>str</code> <p>The user's datacenter (e.g., EU).</p> <code>datacenter_host</code> <code>str</code> <p>The user's datacenter host (e.g., https://api-ecos-eu.weiheng-tech.com).</p>"},{"location":"api/#ecactus.model.Home","title":"<code>Home</code>","text":"<p>Represents a home.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the home.</p> <code>name</code> <code>str</code> <p>Name of the home (or <code>SHARED_DEVICES</code> if the home is shared from another account).</p> <code>type</code> <code>int</code> <p>Type of the home.</p> <code>longitude</code> <code>float | None</code> <p>Longitude of the home's location, or None if not specified.</p> <code>latitude</code> <code>float | None</code> <p>Latitude of the home's location, or None if not specified.</p> <code>device_number</code> <code>int</code> <p>Number of devices associated with the home.</p> <code>relation_type</code> <code>int</code> <p>Type of relation for the home.</p> <code>create_time</code> <code>datetime</code> <p>Time when the home was created.</p> <code>update_time</code> <code>datetime</code> <p>Time when the home was last updated.</p>"},{"location":"api/#ecactus.model.Device","title":"<code>Device</code>","text":"<p>Represents a device.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the device.</p> <code>alias</code> <code>str</code> <p>Human-readable name for the device (e.g., \"My Device\").</p> <code>state</code> <code>int</code> <p>Current state of the device.</p> <code>vpp</code> <code>bool</code> <p>VPP status.</p> <code>type</code> <code>int</code> <p>Type of the device.</p> <code>serial</code> <code>str</code> <p>Device serial number.</p> <code>agent_id</code> <code>str</code> <p>Unique identifier for the device's agent.</p> <code>longitude</code> <code>float</code> <p>Longitude of the device's location.</p> <code>latitude</code> <code>float</code> <p>Latitude of the device's location.</p> <code>device_type</code> <code>str | None</code> <p>Unknown (e.g., \"XX-XXX123\").</p> <code>master</code> <code>int</code> <p>Master status.</p>"},{"location":"api/#ecactus.model.PowerMetrics","title":"<code>PowerMetrics</code>","text":"<p>Represents a single timestamped power data point.</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>datetime</code> <p>Timestamp of the data point.</p> <code>solar_power</code> <code>float | None</code> <p>Power generated by the solar panels in watts (W).</p> <code>grid_power</code> <code>float | None</code> <p>To be defined (W).</p> <code>battery_power</code> <code>float | None</code> <p>Power to/from the battery (W).</p> <code>meter_power</code> <code>float | None</code> <p>Power measured (Negative means export to the grid, positive means import from the grid.) (W).</p> <code>home_power</code> <code>float | None</code> <p>Power consumed by the home (W).</p> <code>eps_power</code> <code>float | None</code> <p>Power consumed by the EPS (W).</p> <code>charge_power</code> <code>float | None</code> <p>To be defined (W).</p>"},{"location":"api/#ecactus.model.PowerTimeSeries","title":"<code>PowerTimeSeries</code>","text":"<p>Represents a series of power metrics over time.</p> <p>Attributes:</p> Name Type Description <code>metrics</code> <code>list[PowerMetrics]</code> <p>A list of power metrics.</p> <p>During initialization it can be provided as a dictionary. Example: <pre><code>PowerTimeSeries( {\n    \"solarPowerDps\":   { \"1740783600\":0.0, ... },\n    \"batteryPowerDps\": { \"1740783600\":0.0, ... },\n    \"gridPowerDps\":    { \"1740783600\":0.0, ... },\n    \"meterPowerDps\":   { \"1740783600\":3152.0, ... },\n    \"homePowerDps\":    { \"1740783600\":3152.0, ... },\n    \"epsPowerDps\":     { \"1740783600\":0.0, ... }\n} )\n</code></pre> The model validator automatically transforms this raw dict into a sorted list of PowerMetrics objects.</p>"},{"location":"api/#ecactus.model.PowerTimeSeries.find_by_timestamp","title":"<code>find_by_timestamp(target, exact=False)</code>","text":"<p>Return the PowerMetrics instance with the timestamp nearest to the target datetime (or with the exact timestamp only).</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>datetime</code> <p>The target datetime to find the PowerMetrics instance for.</p> required <code>exact</code> <code>bool</code> <p>If True, only return the PowerMetrics instance with the exact timestamp. If False, return the PowerMetrics instance with the timestamp nearest to the target datetime.</p> <code>False</code> <p>Returns:</p> Type Description <code>PowerMetrics | None</code> <p>A PowerMetrics instance corresponding to the target datetime.</p>"},{"location":"api/#ecactus.model.PowerTimeSeries.find_between","title":"<code>find_between(start, end)</code>","text":"<p>Return a list of PowerMetrics instances with timestamps between start and end (inclusive).</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>datetime</code> <p>The start datetime of the range.</p> required <code>end</code> <code>datetime</code> <p>The end datetime of the range.</p> required <p>Returns:</p> Type Description <code>PowerTimeSeries</code> <p>A list of PowerMetrics instances with timestamps between start and end (inclusive).</p>"},{"location":"api/#ecactus.model.EnergyMetric","title":"<code>EnergyMetric</code>","text":"<p>Represents a single energy data point.</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>datetime</code> <p>Timestamp of the data point.</p> <code>energy</code> <code>float | None</code> <p>The measured energy value at the given timestamp.</p>"},{"location":"api/#ecactus.model.EnergyHistory","title":"<code>EnergyHistory</code>","text":"<p>Represents a series of energy metrics over a period.</p> <p>Attributes:</p> Name Type Description <code>energy_consumption</code> <code>float</code> <p>The total energy consumption in kWh.</p> <code>solar_percent</code> <code>float</code> <p>The percentage of energy produced by solar panels.</p> <code>metrics</code> <code>list[EnergyMetric]</code> <p>A list of energy measurement points.</p> <p>During initialization it can be provided as a dictionary from the \"homeEnergyDps\" field. Example:     <pre><code>EnergyHistory( {\n\"energyConsumption\": 12.3,\n\"solarPercent\": 45.6,\n\"homeEnergyDps\": {\n    \"1733112000\": 39.6,\n    ...\n    \"1735707599\": 41.3,\n    }\n} )\n</code></pre> The model validator automatically transforms this raw dict into a sorted list of EnergyMetric objects.</p>"},{"location":"api/#ecactus.model.EnergyStatistics","title":"<code>EnergyStatistics</code>","text":"<p>Represents energy statistics.</p> <p>Attributes:</p> Name Type Description <code>consumption</code> <code>float</code> <p>The total energy consumption (kWh).</p> <code>from_battery</code> <code>float</code> <p>The energy consumed from battery (kWh).</p> <code>to_battery</code> <code>float</code> <p>The energy sent to battery (kWh).</p> <code>from_grid</code> <code>float</code> <p>The energy consumed from the grid (kWh).</p> <code>to_grid</code> <code>float</code> <p>The energy sent to the grid (kWh).</p> <code>from_solar</code> <code>float</code> <p>The energy produced from solar (kWh).</p> <code>eps</code> <code>float</code> <p>To be defined.</p>"},{"location":"api/#ecactus.model.ConsumptionMetrics","title":"<code>ConsumptionMetrics</code>","text":"<p>Represents a single timestamped consumption data point.</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>datetime</code> <p>Timestamp of the data point.</p> <code>from_battery</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=fromBatteryDps)]</code> <p>Energy consumed from battery (kWh).</p> <code>to_battery</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=toBatteryDps)]</code> <p>Energy sent to battery (kWh).</p> <code>from_grid</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=fromGridDps)]</code> <p>Energy consumed from the grid (kWh).</p> <code>to_grid</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=toGridDps)]</code> <p>Energy sent to the grid (kWh).</p> <code>from_solar</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=fromSolarDps)]</code> <p>Energy produced from solar (kWh).</p> <code>home</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=homeEnergyDps)]</code> <p>Home energy consumption (kWh).</p> <code>eps</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=epsDps)]</code> <p>To be defined.</p> <code>self_powered</code> <code>Annotated[float | None, Field(strict=True, ge=0, alias=selfPoweredDps)]</code> <p>Autonomous operation (%).</p>"},{"location":"api/#ecactus.model.ConsumptionTimeSeries","title":"<code>ConsumptionTimeSeries</code>","text":"<p>Represents energy time series.</p> <p>Attributes:</p> Name Type Description <code>metrics</code> <code>list[ConsumptionMetrics]</code> <p>A list of consumption metrics.</p> <p>During initialization it can be provided as a dictionary. Example: <pre><code>ConsumptionTimeSeries( {\n    \"fromBatteryDps\": {\n        \"1733976000\": 0.0,\n        \"1733889600\": 0.0,\n        ...\n        \"1734062400\": 0.0,\n    },\n    \"toBatteryDps\": {...},\n    \"fromGridDps\": {...},\n    \"toGridDps\": {...},\n    \"fromSolarDps\": {...},\n    \"homeEnergyDps\": {...},\n    \"epsDps\": {...},\n    \"selfPoweredDps\": {...},\n} )\n</code></pre> The model validator automatically transforms this raw dict into a sorted list of ConsumptionMetrics objects.</p>"},{"location":"api/#ecactus.model.DeviceInsight","title":"<code>DeviceInsight</code>","text":"<p>Represents various statistics and metrics.</p> <p>Attributes:</p> Name Type Description <code>self_powered</code> <code>int</code> <p>Autonomous operation (%).</p> <code>power_timeseries</code> <code>PowerTimeSeries | None</code> <p>A list of power metrics.</p> <code>energy_statistics</code> <code>EnergyStatistics | None</code> <p>Statistics of energy usage.</p> <code>energy_timeseries</code> <code>ConsumptionTimeSeries | None</code> <p>A list of energy consumption metrics.</p>"},{"location":"api/#ecactus.exceptions","title":"<code>ecactus.exceptions</code>","text":"<p>Ecos client custom exceptions.</p>"},{"location":"api/#ecactus.exceptions.EcosApiError","title":"<code>EcosApiError</code>","text":"<p>Base exception class for all ECOS API-related errors.</p>"},{"location":"api/#ecactus.exceptions.InitializationError","title":"<code>InitializationError(message=None)</code>","text":"<p>Raised when there is an initialization error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str | None</code> <p>The error message.</p> <code>None</code>"},{"location":"api/#ecactus.exceptions.AuthenticationError","title":"<code>AuthenticationError(message=None)</code>","text":"<p>Raised when there is an authentication error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str | None</code> <p>The error message.</p> <code>None</code>"},{"location":"api/#ecactus.exceptions.UnauthorizedError","title":"<code>UnauthorizedError(message=None)</code>","text":"<p>Raised when there is an unauthorized error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str | None</code> <p>The error message.</p> <code>None</code>"},{"location":"api/#ecactus.exceptions.HomeDoesNotExistError","title":"<code>HomeDoesNotExistError(home_id=None)</code>","text":"<p>Raised when a home does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>home_id</code> <code>str | None</code> <p>The home ID the error occurred for.</p> <code>None</code>"},{"location":"api/#ecactus.exceptions.UnauthorizedDeviceError","title":"<code>UnauthorizedDeviceError(device_id=None)</code>","text":"<p>Raised when a device is not authorized or unknown.</p> <p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>str | None</code> <p>The device ID the error occurred for.</p> <code>None</code>"},{"location":"api/#ecactus.exceptions.ParameterVerificationFailedError","title":"<code>ParameterVerificationFailedError(message=None)</code>","text":"<p>Raised when a parameter verification fails.</p>"},{"location":"api/#ecactus.exceptions.InvalidJsonError","title":"<code>InvalidJsonError()</code>","text":"<p>Raised when the API returns invalid JSON.</p>"},{"location":"api/#ecactus.exceptions.ApiResponseError","title":"<code>ApiResponseError(code, message)</code>","text":"<p>Raised when the API returns a non-successful response.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The API status code.</p> required <code>message</code> <code>str</code> <p>The error message.</p> required"},{"location":"api/#ecactus.exceptions.HttpError","title":"<code>HttpError(status_code, message)</code>","text":"<p>Raised when an HTTP error occurs while making an API request.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>The HTTP status code.</p> required <code>message</code> <code>str</code> <p>The error message.</p> required"}]}